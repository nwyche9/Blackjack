
# coding: utf-8

# In[1]:


import random
#Global variables here
suits=('Hearts', 'Diamonds', 'Spades', 'Clubs')
ranks=('Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Jack', 'Queen', 'King', 'Ace')
values={'Two':2, 'Three':3, 'Four':4, 'Five':5, 'Six':6, 'Seven':7, 'Eight':8, 'Nine':9, 'Ten':10, 'Jack':10, 'Queen':10, 'King':10, 'Ace':11}

playing=True


# In[2]:


class Card:
    
    def __init__(self,suit,rank):
        self.suit=suit
        self.rank=rank
       
        
    
    def __str__(self):
        return f'{self.rank} of {self.suit}'


# In[3]:


class Deck:
    def __init__(self):
        self.deck=[]
        for suit in suits:
            for rank in ranks:
                self.deck.append(Card(suit,rank))
 
    def __str__(self):
        deck_comp=''
        for card in self.deck:
            deck_comp += '\n '+card.__str__()
        return 'The deck has:' + deck_comp
    
    def shuffle(self):
        random.shuffle(self.deck)
        
    def deal(self):
        single_card=self.deck.pop()
        return single_card
        


# In[4]:


test_deck=Deck()
test_deck.shuffle()
print(test_deck)


# In[5]:


class Hand:
    def __init__(self):
        self.cards = []
        self.value = 0
        self.aces = 0
        
    def add_card(self,card):
        self.cards.append(card)
        self.value += values[card.rank]
        if card.rank == 'Ace':
            self.aces += 1

        
    
    def adjust_for_ace(self):
        #Total value >21 and ace present make ace to value 1 from 11
        while self.value > 21 and self.aces:
            self.value -=10
            self.aces -=1
            


# In[6]:


test_deck=Deck()
test_deck.shuffle()
test_player=Hand()


test_player.add_card(test_deck.deal())
test_player.add_card(test_deck.deal())


# In[7]:


for card in test_player.cards:
    print(card)


# In[8]:


class Chips:
    
    def __init__(self,total=100):
        self.total=total
        self.bet=0
        
    def win_bet(self):
        self.total += self.bet
         
            
    def lose_bet(self):
        self.total -= self.bet
        
    


# In[9]:


def take_bet(chips):
    
    while True:
        
        try:
            chips.bet=int(input('Number of Chips??  '))
        except:
            print('Your number of chips please  ')
            continue
        else:
            if chips.bet> chips.total:
                print('Insufficient chips. You only have: {}'.format(chips.total))
            else:
                break


# In[10]:


def hit(deck,hand):
    single_card=deck.deal()
    hand.add_card(single_card)
    hand.adjust_for_ace()


# In[11]:


def hit_or_stand(deck,hand):
    global playing
    
    while True:
        x=input('Hit or Stand?? h or s  ')
        if x[0].lower()=='h':
            hit(deck,hand)
        elif x[0].lower()=='s':
            print("Player stands")
            playing = False
            
        else:
            print('Please enter h or s for hit or stand  ')
            continue
            
        break
        


# In[12]:


def show_some(player, dealer):
    print("\nDealer's Hand:  ")
    print(" <card hidden>")
    print('',dealer.cards[1])
    print("\nPlayer's Hand: ", *player.cards, sep='\n ')
    
def show_all(player, dealer):
    print("\nDealer's Hand: ", *dealer.cards, sep='\n ')
    print("Dealer's Hand =",dealer.value)
    print("\nPlayer's Hand:", *player.cards, sep='\n ')
    print("Player's Hand =",player.value)
    


# In[13]:


def player_busts(player,dealer,chips):
    print("Player Bust")
    chips.lose_bet

def player_wins(player,dealer,chips):
    print("Player Wins")
    chips.win_bet()

def dealer_busts(player,dealer,chips):
    print("Dealer Bust Player wins")
    chips.win_bet()

def dealer_wins(player,dealer,chips):
    print("Dealer Wins")
    chips.lose_bet()

def push(player,dealer):
    print('Tie game. PUSH')


# In[ ]:


while True:
    #Print an openig
    print("Welcome!!!!")
    
    #Create and shuffle the deck, then deal each player 2 cards
    deck=Deck()
    deck.shuffle()
    
    player_hand = Hand()
    player_hand.add_card(deck.deal())
    player_hand.add_card(deck.deal())
    
    dealer_hand = Hand()
    dealer_hand.add_card(deck.deal())
    dealer_hand.add_card(deck.deal())
    
   #Set player chips
    player_chips = Chips()
    
    #Take player bet    
    take_bet(player_chips)
    
    
    show_some(player_hand,dealer_hand)

          
    
    
    
    
    while playing:
        
        #Ask for hit or stand
        hit_or_stand(deck,player_hand)
        
        show_some(player_hand,dealer_hand)
        
        #if player hand > 21, player busts and breal loop
        if player_hand.value > 21:
            player_busts(player_hand,dealer_hand,player_chips)
        
            
        
        
        break
        
        #If player didnt bust, play dealer's hand until dealer reaches 17
    if player_hand.value < 21:
        
        while dealer_hand.value < player_hand.value:
            hit(deck,dealer_hand)
            
        show_all(player_hand,dealer_hand)
            
            
            #winning scenarios
        if dealer_hand.value > 21:
            dealer_busts(player_hand,dealer_hand,player_chips)
            
        elif player_hand.value > dealer_hand.value:
            player_wins(player_hand, dealer_hand,player_chips)
            
        elif dealer_hand.value > player_hand.value:
            dealer_wins(player_hand,dealer_hand,player_chips)
            
        elif dealer_hand.value < player_hand.value:
            player_wins(player_hand,dealer_hand,player_chips)
            
        else:
            push(player_hand,dealer_hand)
                
                #Tell player their new chip amount
    print('\n Player total chips are:  {}'.format(player_chips.total))
    
    
    #Ask to play again
    new_game = input("Play again?? y or n")
    
    if new_game[0].lower() == 'y':
        playing = True
        continue
    else:
        print("Thanks for playing!!")
        
        break


